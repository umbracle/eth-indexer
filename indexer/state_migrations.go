// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package indexer generated by go-bindata.// sources:
// indexer/migrations/01-block.sql
// indexer/migrations/02-transaction.sql
// indexer/migrations/03-events.sql
// indexer/migrations/04-tracker.sql
// indexer/migrations/05-indexer.sql
package indexer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexerMigrations01BlockSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\xe2\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\xc9\x4f\xce\x56\xd0\xe0\xe2\xd2\xe4\xd2\xd2\x07\x04\x00\x00\xff\xff\x6e\xc1\x67\xd7\x2b\x00\x00\x00")

func indexerMigrations01BlockSqlBytes() ([]byte, error) {
	return bindataRead(
		_indexerMigrations01BlockSql,
		"indexer/migrations/01-block.sql",
	)
}

func indexerMigrations01BlockSql() (*asset, error) {
	bytes, err := indexerMigrations01BlockSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "indexer/migrations/01-block.sql", size: 43, mode: os.FileMode(436), modTime: time.Unix(1620822980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexerMigrations02TransactionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4d\x0a\xc2\x30\x10\x85\xf7\x39\xc5\x2c\xb5\x08\x3d\x43\x95\x08\x05\x51\xb0\x59\xb8\x0b\x31\x8d\x6d\xb0\x9d\x94\x64\x22\x3d\xbe\xd0\x1f\x6c\x6d\x96\xdf\x7b\x79\xf3\xa5\x09\x3b\xdd\x79\x26\x38\x88\xec\x78\xe1\x90\x9f\xe1\x7a\x13\xc0\x1f\x79\x21\x0a\x20\xaf\x30\x28\x4d\xd6\x61\x80\x1d\x03\x00\xa8\x55\xa8\x61\x7a\x64\x7a\x3a\x0c\x14\x1d\x6a\x33\x51\x8c\xad\xf1\x56\x8f\xc1\xb3\x71\xfa\x2d\xc7\x4f\xbf\xfa\x48\x31\xb6\xff\x75\xea\xa5\xc5\xd2\xf4\x9b\x9d\x97\x77\xad\x54\x65\xe9\x57\x67\xc9\xcd\x6c\x49\x3f\xaa\x89\x66\xa3\x58\xa9\x30\x7b\xaf\xa7\x2b\x15\x64\xe7\xed\xe0\xbf\x0a\x2c\x76\x91\x16\x3b\x6c\xcf\x92\xf4\x1b\x00\x00\xff\xff\xe2\xb3\x9b\x39\x31\x01\x00\x00")

func indexerMigrations02TransactionSqlBytes() ([]byte, error) {
	return bindataRead(
		_indexerMigrations02TransactionSql,
		"indexer/migrations/02-transaction.sql",
	)
}

func indexerMigrations02TransactionSql() (*asset, error) {
	bytes, err := indexerMigrations02TransactionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "indexer/migrations/02-transaction.sql", size: 305, mode: os.FileMode(436), modTime: time.Unix(1620822991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexerMigrations03EventsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\xcd\x6a\x03\x21\x14\x05\xe0\xb5\x3e\xc5\x59\x26\x21\x90\x07\xc8\x2a\x6d\x2d\x0c\x94\x09\x34\x2e\xb2\x1b\xcc\x78\x4b\xa4\x8e\x96\xd1\x09\x3e\x7e\xc9\x38\xbf\x10\x77\xe7\xe3\x78\xb9\xdc\xc3\x8e\xbf\x7f\x8b\x93\x14\x90\xa7\xb7\x2f\x81\xe2\x13\xe5\x59\x42\x5c\x8b\x8b\xbc\x80\x1e\xe4\x62\xc0\x86\x03\xc8\x01\xf9\x45\x4a\x71\xcf\x99\x71\x3a\x81\x31\xd7\x35\xd4\x9a\x7a\xcf\xd9\x4f\x67\x6d\xd5\x2b\x30\x6b\x4c\x4f\xa3\x04\xb6\xb2\xbb\x0a\x77\xb0\x61\xd4\xcd\xfa\xfa\xb7\x72\x5d\xb3\x2c\x65\x5c\xf5\x94\xd6\x2d\x85\x30\xe5\xe8\xff\x4c\x6d\xf4\x72\xab\x9e\x02\xd8\x58\xd1\x2a\xaa\x29\x3d\x7b\x2d\x35\xfe\x41\xf9\xcf\xcd\x7b\x4b\xca\xf1\xed\x91\x8f\x97\x28\xca\x0f\x71\x7d\x79\x89\x6a\xde\xf2\x5c\x0e\xb6\x99\x6c\x7b\xe4\xbb\xc3\x7f\x00\x00\x00\xff\xff\x8e\xa2\xa7\x95\x51\x01\x00\x00")

func indexerMigrations03EventsSqlBytes() ([]byte, error) {
	return bindataRead(
		_indexerMigrations03EventsSql,
		"indexer/migrations/03-events.sql",
	)
}

func indexerMigrations03EventsSql() (*asset, error) {
	bytes, err := indexerMigrations03EventsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "indexer/migrations/03-events.sql", size: 337, mode: os.FileMode(436), modTime: time.Unix(1620822989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexerMigrations04TrackerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x41\xaa\xc2\x30\x10\xc6\xf1\x7d\x4e\xf1\x2d\xdf\x03\x6f\xe0\xaa\x95\x88\x05\xa9\x68\x53\x70\x27\x63\x1a\xb1\xb4\x49\x24\x99\x82\xde\x5e\x68\xb0\x12\x70\x96\xff\x1f\xcc\x8c\xd8\x9c\x64\xa1\x24\x54\x51\xee\x25\xaa\x2d\xea\x83\x82\x3c\x57\x8d\x6a\xc0\x81\xf4\x10\xf1\x27\x00\xc0\x91\x35\x58\x86\xcd\x93\xd1\xd6\xd5\xb1\x95\xab\x99\x6f\xc1\xdb\x0b\x75\x5d\x58\x38\x75\xf6\xdf\x9a\xf7\x47\xaf\xb3\x75\xa9\x8f\x14\xb9\x1c\xbd\x1e\x76\x14\xef\xbf\x7a\x3d\x59\xc0\x4d\xd6\x84\x5e\x27\x8a\x4c\x21\xd9\xfc\x67\x46\x2f\xa7\x4d\xf7\xb9\x72\xf5\x7e\x34\xe4\xc4\xff\x5a\xbc\x03\x00\x00\xff\xff\x07\xe3\xb8\xc9\xf7\x00\x00\x00")

func indexerMigrations04TrackerSqlBytes() ([]byte, error) {
	return bindataRead(
		_indexerMigrations04TrackerSql,
		"indexer/migrations/04-tracker.sql",
	)
}

func indexerMigrations04TrackerSql() (*asset, error) {
	bytes, err := indexerMigrations04TrackerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "indexer/migrations/04-tracker.sql", size: 247, mode: os.FileMode(436), modTime: time.Unix(1620823212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexerMigrations05IndexerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xd2\xd7\xe2\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\xcc\x4b\x49\xad\x48\x2d\x8a\x4f\xcd\x2b\x29\xaa\x54\xd0\xe0\x52\x50\x50\x50\xc8\x4b\xcc\x4d\x55\x80\x80\x92\xd4\x8a\x12\x1d\xb0\x60\x4e\x62\x71\x49\x7c\x52\x4e\x7e\x72\xb6\x82\x42\x5e\x69\x6e\x6a\x51\x66\x32\x44\x22\xd4\xcf\x33\x30\xd4\x55\x03\xa4\x49\x93\x4b\x93\x4b\x4b\x9f\x0b\x10\x00\x00\xff\xff\xe9\x19\x73\xb6\x73\x00\x00\x00")

func indexerMigrations05IndexerSqlBytes() ([]byte, error) {
	return bindataRead(
		_indexerMigrations05IndexerSql,
		"indexer/migrations/05-indexer.sql",
	)
}

func indexerMigrations05IndexerSql() (*asset, error) {
	bytes, err := indexerMigrations05IndexerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "indexer/migrations/05-indexer.sql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1620823006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"indexer/migrations/01-block.sql":       indexerMigrations01BlockSql,
	"indexer/migrations/02-transaction.sql": indexerMigrations02TransactionSql,
	"indexer/migrations/03-events.sql":      indexerMigrations03EventsSql,
	"indexer/migrations/04-tracker.sql":     indexerMigrations04TrackerSql,
	"indexer/migrations/05-indexer.sql":     indexerMigrations05IndexerSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"indexer": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"01-block.sql":       &bintree{indexerMigrations01BlockSql, map[string]*bintree{}},
			"02-transaction.sql": &bintree{indexerMigrations02TransactionSql, map[string]*bintree{}},
			"03-events.sql":      &bintree{indexerMigrations03EventsSql, map[string]*bintree{}},
			"04-tracker.sql":     &bintree{indexerMigrations04TrackerSql, map[string]*bintree{}},
			"05-indexer.sql":     &bintree{indexerMigrations05IndexerSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
