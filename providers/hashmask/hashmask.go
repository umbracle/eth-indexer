package hashmask

import (
	"math/big"

	"github.com/umbracle/eth-indexer/sdk"
	"github.com/umbracle/go-web3"
	"github.com/umbracle/go-web3/abi"
)

var nameChangeEvent = abi.MustNewEvent(`NameChange(uint256 indexed tokenId, string newName)`)

func Provider() *sdk.Provider {
	return &sdk.Provider{
		Resources: map[string]*sdk.Resource{
			"mask": {
				Schema: &sdk.Table{
					Fields: []*sdk.Field{
						{
							Name: "tokenid",
							Type: sdk.TypeUint,
							ID:   true,
						},
						{
							Name: "name",
							Type: sdk.TypeAddress,
						},
					},
				},
			},
		},
		Filter: &sdk.FilterByAddr{
			// Catch all the events generated by the hashmask contract
			FromAddr:   web3.HexToAddress("0xc2c747e0f7004f9e8817db2ca4997657a7746928"),
			StartBlock: 11743743,
		},
		Trackers: []*sdk.Tracker{
			{
				Type: nameChangeEvent,
				Handler: func(req *sdk.HandlerReq) {
					tokenID := req.Vals["tokenId"].(*big.Int).Uint64()
					name := req.Vals["newName"].(string)

					obj := req.Get("mask", tokenID)
					obj.Set("name", name)
				},
			},
		},
		Snapshots: map[string]*sdk.Snapshot2{
			"masks_names": {
				Table: "mask",
				Index: []string{"name"},
			},
		},
	}
}
